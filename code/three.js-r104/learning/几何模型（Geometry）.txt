实例：	// 创建了一个平面
	var geometry = new THREE.Geometry();

        	geometry.vertices.push(
            		new THREE.Vector3( -10,  10, 0 ),
            		new THREE.Vector3( -10, -10, 0 ),
            		new THREE.Vector3(  10, -10, 0 )
        	);

        	geometry.faces.push( new THREE.Face3( 0, 1, 2 ) );

        	geometry.computeBoundingSphere();

        	cene.add(new THREE.Mesh(geometry,new THREE.MeshNormalMaterial()))

构造器（Constructor）
	Geometry()
	该构造器没有参数。

属性（Properties）
# .id
	这个geometry实例的唯一标识。
# .name
	这个geometry的名称，缺省是一个空字符串。
# .vertices
	vertices数组。
	用来保存模型中所有顶点位置的数组。
	要更新该数组，Geometry.verticesNeedUpdate 需要被设置为true。
# .colors
	顶点colors数组，和上述vertices属性的个数和顺序一致。
	用于 点(Points) 和 线条(Line)。
	Meshes 使用嵌在表面的每面用的顶点颜色。
	要更新该数组，Geometry.colorsNeedUpdate 需要被设置为true。
# .faces
	triangles数组。
	三角面数组，用来描述模型中的每个顶点是如何相互连接的。
	要更新该数组，Geometry.elementsNeedUpdate 需要被设置为true。
.faceVertexUvs
	面 UV 层数组。
	每个UV层都是一个 UVs 数组，和面上的顶点数量和顺序一致。
	要更新该数组，Geometry.uvsNeedUpdate 需要被设置为true。
# .morphTargets
	变形目标数组。每个变形目标是一个具备如下形式的JavaScript对象：
	{ name: "targetName", vertices: [ new THREE.Vector3(), ... ] } 变形顶点数和主顶点的数量和顺序一致。
# .morphNormals
	变形法向量数组。变形法向量和变形目标的数据结构类似：
	morphNormal = { name: "NormalName", normals: [ new THREE.Vector3(), ... ] }
# .skinWeights
	蒙皮权重数组。当使用 蒙皮网孔(SkinnedMesh)时，每个顶点最多可以有4个bones会对它产生影响。 skinWeights 属性是一组权重值，对应于模型中的顶点顺序。比如，第一个 skinWeight 将对应于模型（geometry）中的第一个顶点（vertex）。 由于每个顶点可以被4个bones所修改，我们用 Vector4 来表示该顶点的蒙皮权重（skin weights）。
	向量的值通常在1到0之间。例如，当设置为0的骨骼变换（bone transformation）不起作用。 当设置为0.5时，将有50%影响。当设置为100%，它将有100%影响。如果只有1个骨骼与顶点关联，那么你只需要关心向量的第一个元素，其余的可以被忽略并设置为0。
# .skinIndices
	就和 skinWeights 属性一样，skinIndices 的值和模型的顶点相匹配。 每个顶点可以有最多4个骨骼与之相关，所以如果你看第1个顶点，和第1个skinIndex，将得到与之对应的骨骼。 比如第一个顶点值为 ( 10.05, 30.10, 12.12 )，然后第一个蒙皮索引的值可能是( 10, 2, 0, 0 )。 第一个蒙皮权重值可能是 ( 0.8, 0.2, 0, 0 )。那么实际上对于第1个顶点，有两个bone权重会起作用，第一个为 mesh.bones[10] 并应用80%的权重，第二个是skeleton.bones[2]应用20%的权重。其余2个bone的值权重为0，不起作用。
#.boundingBox
	包围盒（Bounding box）。
	{ min: new THREE.Vector3(), max: new THREE.Vector3() }
# .boundingSphere
	包围球（Bounding sphere）。
	{ radius: float }
# .verticesNeedUpdate
	如果顶点数组被更新则设置为 true 。
# .elementsNeedUpdate
	如果面数组被更新则设置为 true 。
# .uvsNeedUpdate
	如果UV数组被更新则设置为 true 。
# .normalsNeedUpdate
	如果法向量数组被更新则设置为 true 。
# .colorsNeedUpdate
	如果颜色数组或者一个三角面颜色被更新则设置为 true 。
# .groupsNeedUpdate
	如果一个三角面材料索引（materialIndex）被更新则设置为 true 。
# .lineDistancesNeedUpdate
	如果线间距数组被更新则设置为 true 。
# .lineDistances
	一个包含线条模型(Line geometry)顶点之间距离的数组。 LinePieces / LineDashedMaterial 需要使用该属性来正确渲染。 线的间距也可以由 computeLineDistances 方法所生成。

方法（Methods）
该类可以使用 EventDispatcher 方法。
# .applyMatrix ( matrix )
	给顶点坐标施加矩阵变换。
# .center ()
	使基于包围盒的几何模型居中。
# .rotateX ( radians )
	使模型绕X轴旋转。这通常做为一次性操作，而不是在一个循环中。对于典型的实时网孔模型，使用 3D对象(Object3D).rotation。
# .rotateY ( radians )
	使模型绕Y轴旋转。这通常做为一次性操作，而不是在一个循环中。对于典型的实时网孔模型，使用 3D对象(Object3D).rotation。
# .rotateZ ( radians )
	使模型绕Z轴旋转。这通常做为一次性操作，而不是在一个循环中。对于典型的实时网孔模型，使用 3D对象(Object3D).rotation。
# .translate ( x, y, z )
	平移模型。这通常做为一次性操作，而不是在一个循环中。对于典型的实时网孔模型，使用 3D对象(Object3D).position。
# .scale ( x, y, z )
	缩放模型。这通常做为一次性操作，而不是在一个循环中。对于典型的实时网孔模型，使用 3D对象(Object3D).scale。
# .lookAt ( vector )
	vector - 一个观察点世界向量
	旋转模型以面对观察点。这通常做为一次性操作，而不是在一个循环中。对于典型的实时网孔模型，使用 3D对象(Object3D).lookAt。
# .computeFaceNormals ()
	计算面法向量。
# .computeVertexNormals ( areaWeighted )
	areaWeighted - 如果为true，则每个面法线对顶点法线的贡献由该面的面积所确定。默认为true。
	通过平均面法线来计算顶点法线。
	面法线必须已存在（预先计算好）。
# .computeMorphNormals ()
	计算变形法线。
# .computeBoundingBox ()
	计算该模型的包围盒，更新 Geometry.boundingBox 属性。
# .computeBoundingSphere ()
	计算该模型的包围球，更新 Geometry.boundingSphere 属性。
	包围盒和包围球都不会被默认计算，需要显式计算，否则它们为 null。
# .merge ( geometry, matrix, materialIndexOffset )
	合并几何模型。
# .mergeVertices ()
	使用哈希表检查重复的顶点。
	重复的顶点被删除，同时面的vertices属性被更新。
# .normalize ()
	正规化模型。
	使模型居中，并且有一个半径等于1的包围球。
# .clone ()
	创建一个新的几何模型克隆。
	此方法只复制顶点、面和UVs。它不复制模型的任何其他属性。
# .dispose ()
	从内存中删除对象。
	当你删除一个模型时，别忘了调用这个方法，否则可能会导致内存泄漏。
# .computeLineDistances ()
	线条模型（Line Geometry）的顶点之间的距离计算。












