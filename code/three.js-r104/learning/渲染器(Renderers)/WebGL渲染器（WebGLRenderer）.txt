WebGL渲染器使用WebGL来绘制您的场景，如果您的设备支持的话。使用WebGL将能够利用GPU硬件加速从而提高渲染性能。
这个渲染器比 Canvas渲染器(CanvasRenderer) 有更好的性能。

WebGLRenderer( parameters )
	parameters 是一个可选对象，包含用来定义渲染器行为的属性。当没有设置该参数时，将使用默认值。
	canvas ― 一个用来绘制输出的 Canvas 对象。
	context ― 所用的 渲染上下文(RenderingContext) 对象。
	precision ― 着色器的精度。可以是"highp", "mediump" 或 "lowp". 默认为"highp"，如果设备支持的话。
	alpha ― Boolean, 默认为 false.
	premultipliedAlpha ― Boolean, 默认为 true.
	antialias ― Boolean, 默认为 false. ( 是否抗锯齿 )
	stencil ― Boolean, 默认为 true.
	preserveDrawingBuffer ― Boolean, 默认为 false.
	depth ― Boolean, 默认为 true.
	logarithmicDepthBuffer ― Boolean, 默认为 false.

属性（Properties）
#.domElement
	一个用来绘制输出的 Canvas 对象。
	该对象通过构造函数中的渲染器所自动创建（如果没有提供的话）；你只需要将其添加到您的网页中。
# .context
	从HTML5 canvas中获取的用来绘图的WebGL渲染上下文。
# .autoClear
	定义渲染器是否应该在渲染之前自动清除其输出。
# .autoClearColor
	如果autoClear为true，该属性用来定义渲染器是否需要清除颜色缓存。默认为 true.
# .autoClearDepth
	如果autoClear为true，该属性用来定义渲染器是否需要清除深度缓存。默认为 true.
# .autoClearStencil
	如果autoClear为true，该属性用来定义渲染器是否需要清除模板缓存。默认为 true。
# .sortObjects
	定义渲染器是否需要对对象排序。默认为 true。
#.clippingPlanes
	一个用户定义的在世界空间中的裁剪平面对象。这些平面是全局范围可用的。空间中的点和该平面的点积为负的将被裁剪掉。默认为 [].
# .localClippingEnabled
	定义渲染器是否考虑对象级别的裁剪平面。默认为 false.
# .gammaInput
	默认为 false. 如果设置了该参数，表示所有纹理和颜色应当使用预乘的gamma值来输入。
# .gammaOutput
	默认为 false. 如果设置了该参数，表示所有纹理和颜色应当使用预乘的gamma值来输出。
# .shadowMap
	实现阴影贴图（或阴影映射）的组件的引用。
# .shadowMap.enabled
	默认为 false. 如果设置了该参数，则启用在场景中的阴影贴图。
# .shadowMap.type
	阴影贴图类型定义 (未经过滤，百分比接近过滤，带着色器双线性过滤的百分比接近过滤)
	可选取值有： THREE.BasicShadowMap, THREE.PCFShadowMap, THREE.PCFSoftShadowMap. 默认为 THREE.PCFShadowMap.
# .shadowMap.renderReverseSided
	默认为 true。该属性表示是否将材质所指定的反面渲染到阴影贴图中。如果禁用，必须在表面光源上设置适当的shadow.bias，可以同时投射和接收阴影以正确渲染。
# .shadowMap.renderSingleSided
	默认为 true. 是否将指定的材料视为双面，而在渲染阴影贴图时使用正面（front-side）。如果禁用，必须在表面光源上设置适当的shadow.bias，可以同时投射和接收阴影以正确渲染。
# .maxMorphTargets
	默认为 8. 着色器中允许的最大MorphTargets数量。记住，标准材料只允许8个MorphTargets。
# .maxMorphNormals
	默认为 4. 着色器中允许的最大MorphNormals数量。记住，标准材料只允许8个MorphNormals。
# .info
	一个关于显卡内存和渲染过程统计信息的对象。便于调试和分析。该对象包含如下字段：
	memory:
		geometries
		textures
	render:
		calls
		vertices
		faces
		points
	programs

方法（Methods）
# .getContext ()
返回WebGL渲染上下文。
# .getContextAttributes ()
返回一个描述WebGL上下文创建时所设置属性的对象。
# .supportsVertexTextures ()
返回一个 Boolean，如果该上下文支持顶点纹理，则为true。
# .getPixelRatio ()
返回当前设备的像素比。
# .setPixelRatio ( value )
设置设备像素比。通常用于HiDPI设备防止模糊输出canvas。
# .getSize ()
返回一个包含渲染器输出canvas宽高的对象，以像素为单位。
# .setSize ( width, height, updateStyle )
调整输出canvas尺寸（宽度，高度），要考虑设备像素比，并且设置视口（viewport）以匹配该尺寸。如果设置 updateStyle 为true，则显式添加像素到输出canvas的样式中。
# .setViewport ( x, y, width, height )
设置视口，从 (x, y) 到 (x + width, y + height)。
# .setScissor ( x, y, width, height )
设置裁剪区域，从 (x, y) 到 (x + width, y + height).
注：以上两种方法中点（x,y）是该区域的左下角。 该区域被定义从左到右的宽度，以及从底部到顶部的高度。该垂直方向的定义和HTML canvas元素的填充方向相反。
# .setScissorTest ( boolean )
启用或禁用裁剪测试。当被激活时，只有裁剪区域内的像素会被进一步的渲染行为所影响。
# .setClearColor ( color, alpha )
设置清除的颜色和透明度。
// 创建一个具有红色背景的渲染器
var renderer = new THREE.WebGLRenderer();
renderer.setSize( 200, 100 );
renderer.setClearColor( 0xff0000 );
# .getClearColor ()
返回一个使用当前清除颜色的 THREE.Color 实例。
# .getClearAlpha ()
返回一个使用当前清除透明度的 float。范围从0到1。
# .clear ( color, depth, stencil )
告诉渲染器来清除其颜色、深度和模板绘制缓冲。该方法初始化颜色缓冲区为当前清除颜色值。
参数缺省为true。
# .renderBufferImmediate ( object, program, shading )
object ― 一个 3D对象(Object3D) 实例
program ― 一个着色器程序（shaderProgram）实例
shading ― 一个材料（Material）实例。
渲染一个即时缓冲区。被renderImmediateObject所调用。
# .renderBufferDirect ( camera, lights, fog, material, geometryGroup, object )
使用相机和正确的材料渲染缓冲模型组。
# .renderBuffer ( camera, lights, fog, material, geometryGroup, object )
使用相机和正确的材料渲染模型组。
# .render ( scene, camera, renderTarget, forceClear )
使用相机渲染一个场景。
如果指定了renderTarget，则渲染到上面，否则渲染到通常的canvas上。
如果forceClear为true, 颜色、深度和模板绘制缓冲将在渲染前被清除，即使渲染器的autoClear属性为false。
即使forceClear被设置为true，我们仍然可以通过设置.autoClearColor, .autoClearStencil 或 .autoClearDepth 属性为false来阻止特定的缓存被清除。
# .readRenderTargetPixels ( renderTarget, x, y, width, height, buffer )
从渲染目标中读取像素数据到你给定的缓冲区中。缓存应该是一个Javascript Uint8Array对象，通过new Uint8Array( renderTargetWidth * renderTargetWidth * 4 )来实例化，考虑大小和颜色信息。这是gl.readPixels的封装。
# .renderImmediateObject ( camera, lights, fog, material, object )
使用相机渲染一个即时对象。
# .setFaceCulling ( cullFace, frontFace )
cullFace ―- "back", "front", "front_and_back", 或 false.
frontFace ―- "ccw" 或 "cw
用于设定GPU中gl的fontFace和cullFace状态，从而启用/禁用渲染时的面剔除。
If cullFace is false, culling will be disabled.
# .setTexture ( texture, slot )
texture -- 需要设置的 texture。
slot -- 纹理所要使用的槽（slot）编号。
此方法设置正确的纹理为wegl着色器的正确插槽。槽数可以被发现作为一个值的均匀的采样。
# .setRenderTarget ( renderTarget )
renderTarget -- 需要设置的 renderTarget（可选）。
该方法设置当前渲染目标。如果参数被忽略，则设置要绘制的canvas为当前渲染目标。
# .supportsCompressedTextureS3TC ()
此方法返回true，如果WebGL支持S3TC格式的纹理压缩。
# .getMaxAnisotropy ()
返回的纹理的各向异性水平。
# .getPrecision ()
获取着色器所用精度。返回 "highp","mediump" 或 "lowp"。
# .setMaterialFaces (material)
material -- 不该被剔除的面的 material。
该方法设置在WebGL渲染器中需要被剔除的面。
# .supportsStandardDerivatives ()
此方法返回true，如果设备WebGL的实现支持标准的衍生物。
# .supportsFloatTextures ()
此方法返回true，如果设备WebGL的实现支持浮点纹理。
# .clearTarget (renderTarget, color, depth, stencil)
renderTarget -- 需要被清除的 renderTarget。
color -- 如果设置，则颜色被清除。
depth -- 如果设置，则深度被清除。
stencil -- 如果设置，则模板被清除。
这个方法可以清除渲染目标。为此，它首先需要激活该渲染目标




